if (!require('ggrepel')) install.packages('ggrepel'); library('ggrepel')
if (!require('ggthemes')) install.packages('ggthemes'); library('ggthemes')
if (!require('sf')) install.packages('sf'); library('sf')
library(nortest)
library(tidyverse)
library(lmtest)
# Carga de datos
data <- read.csv("../data/datos_properati.csv", stringsAsFactors = FALSE, encoding='utf-8')
# Revisión de las variables
names(data)
# Selección de variables
datos <- dplyr::select(data, -operation, -place_with_parent_names)
# Tipo de datos
sapply(datos, class)
datos$created_on <- as.Date(datos$created_on)
datos$property_type <- as.factor(datos$property_type)
datos$barrio <- as.factor(datos$barrio)
datos$comuna <- as.factor(datos$comuna)
datos$rooms <- as.integer(datos$rooms)
# Tipo de datos
sapply(datos, class)
# Resumen estadístico
summary(datos)
# Función para calcular el porcentaje de nulos por columna
calcular_porcentaje_nulos <- function(df) {
# Calcula el número total de filas en el dataframe
total_filas <- nrow(df)
# Calcula el porcentaje de nulos por columna
porcentaje_nulos <- df %>%
summarise_all(~ sum(is.na(.)) / total_filas * 100)
return(porcentaje_nulos)
}
#calculando el procentaje de nulos por columna
porcentaje_nulos <- calcular_porcentaje_nulos(datos)
porcentaje_nulos
# Filtramos solo departamentos
Dpto <- filter(datos, property_type == 'apartment')
porc_null_dpto <- calcular_porcentaje_nulos(Dpto)
porc_null_dpto
# Eliminación de variables
dfDpto <- select(Dpto, -floor, -expenses, -property_type)
# Nueva proporción de nulos
calcular_porcentaje_nulos(dfDpto)
# Filtra los valores no nulos
dfDptoNN <- dfDpto %>% filter(complete.cases(.))
porc_null_dptoN <- calcular_porcentaje_nulos(dfDptoNN)
porc_null_dptoN
# Validación del requisito
dfDptoNN$val <- dfDptoNN$surface_total_in_m2 >= dfDptoNN$surface_covered_in_m2
dfDptoNN <- dfDptoNN[dfDptoNN$val == 'TRUE',]
dfDptoNN <- select(dfDptoNN, -val)
# Filtro de datos
dfDptoN <- dfDptoNN[(dfDptoNN$surface_total_in_m2 <= 200) & (dfDptoNN$price_usd_per_m2 <= 6000),]
head(dfDptoN, 3)
dfDptoN$barrio <- as.factor(as.character(dfDptoN$barrio))
dfDptoN$comuna <- factor(as.character(dfDptoN$comuna), levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
# Resumen estadístico de la variable rooms
summary(dfDptoN$rooms)
# Distribución numérica de la variable rooms
table(dfDptoN$rooms)
# Agrupación de valores
dfDptoN$rooms <- ifelse(dfDptoN$rooms < 6, dfDptoN$rooms, 6)
grafico_mix <- function(datos, variable, titulo, col_his, breaks, col_line_density,
col_caja, col_bigote, col_border){
par(mfrow = c(1, 1))
# Histograma
h <- hist(datos, probability = TRUE, ylab = "", col = col_his, xlab = variable,
xlim = c(min(datos, na.rm = T),max(datos, na.rm = T)),
include.lowest = TRUE, xaxt = "n", axes = FALSE, main = titulo,
breaks = seq(min(datos, na.rm = T),max(datos, na.rm = T),
by=(max(datos, na.rm = T)-min(datos, na.rm = T))/breaks))
# Eje
axis(1, at = round(seq(min(datos, na.rm = T),max(datos, na.rm = T),
by=(max(datos, na.rm = T)-min(datos, na.rm = T))/breaks),2))
# Densidad
lines(density(na.omit(datos)), col = col_line_density, lwd = 2)
# Boxplot
par(new = TRUE)
graph_caja <- boxplot(datos, horizontal = TRUE, axes = FALSE, border = col_border,
lwd = 1, col = col_caja, whiskcol = col_bigote, na.action = F)
}
# price_usd_per_m2
grafico_mix(datos = dfDptoN$price_usd_per_m2, variable = "price_usd_per_m2", titulo = "",
col_his = adjustcolor(col = "#F5762E", alpha.f = 0.5),
breaks = 15, col_line_density = "#F57F51",
col_caja = adjustcolor(col = "#B1F0E5", alpha.f = 0.5),
col_bigote = "#46A897", col_border = "#46A897")
# price_aprox_usd
grafico_mix(datos = dfDptoN$price_aprox_usd, variable = "price_aprox_usd", titulo = "",
col_his = adjustcolor(col = "#F5762E", alpha.f = 0.5),
breaks = 15, col_line_density = "#F57F51",
col_caja = adjustcolor(col = "#B1F0E5", alpha.f = 0.5),
col_bigote = "#46A897", col_border = "#46A897")
# surface_covered_in_m2
grafico_mix(datos = dfDptoN$surface_covered_in_m2, variable = "surface_covered_in_m2", titulo = "",
col_his = adjustcolor(col = "#F5762E", alpha.f = 0.5),
breaks = 15, col_line_density = "#F57F51",
col_caja = adjustcolor(col = "#B1F0E5", alpha.f = 0.5),
col_bigote = "#46A897", col_border = "#46A897")
# surface_total_in_m2
grafico_mix(datos = dfDptoN$surface_total_in_m2, variable = "surface_total_in_m2", titulo = "",
col_his = adjustcolor(col = "#F5762E", alpha.f = 0.5),
breaks = 15, col_line_density = "#F57F51",
col_caja = adjustcolor(col = "#B1F0E5", alpha.f = 0.5),
col_bigote = "#46A897", col_border = "#46A897")
# price_aprox_usd
ggplot(data = dfDptoN, aes(x = factor(rooms), y = price_aprox_usd)) +
stat_boxplot(geom = "errorbar", # Bigotes
width = 0.2) +
geom_boxplot(fill = "#4271AE", colour = "#1F3552", # Colores
alpha = 0.9, outlier.colour = "red") +
scale_y_continuous(name = "price_aprox_usd") +  # Etiqueta de la variable continua
scale_x_discrete(name = "rooms") +        # Etiqueta de los grupos
theme(axis.line = element_line(colour = "black", size = 0.25))
par(mfrow=c(2,2))
# price_usd_per_m2
qqnorm(dfDptoN[,8],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[8]), col = 'steelblue')
qqline(dfDptoN[,8],col="red")
text(-2, 5000, paste("AD: p-value = ", format(ad.test(dfDptoN$price_usd_per_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# price_aprox_usd
qqnorm(dfDptoN[,5],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[5]), col = 'steelblue')
qqline(dfDptoN[,5],col="red")
text(-2, 1000000, paste("AD: p-value = ", format(ad.test(dfDptoN$price_aprox_usd)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# surface_covered_in_m2
qqnorm(dfDptoN[,7],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[7]), col = 'steelblue')
qqline(dfDptoN[,7],col="red")
text(-2, 175, paste("AD: p-value = ", format(ad.test(dfDptoN$surface_covered_in_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# surface_total_in_m2
qqnorm(dfDptoN[,6],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[6]), col = 'steelblue')
qqline(dfDptoN[,6],col="red")
text(-2, 170, paste("AD: p-value = ", format(ad.test(dfDptoN$surface_total_in_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# En la capital de Argentina, Buenos Aires existe 15 comunas que agrupan a los barrios
dfDptoG <- dfDptoN %>%  group_by(comuna)
grpdfDpto <- dfDptoG %>% summarise(mPrice = mean(price_aprox_usd),
mArea_m2 = mean(surface_total_in_m2),
mAreaCons = mean(surface_covered_in_m2),
mprice_m2 = mean(price_usd_per_m2),
mhab = mean(rooms) )
grafPpC <- ggplot(grpdfDpto, aes(x = comuna, y = mPrice, fill = comuna)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mPrice,1) ), vjust = -0.5) +
labs(title = "1.1. Media de Precios por Comunas",
x = "Comuna", y = "Media de Precios") +
theme_minimal() +
geom_line(aes(y = mPrice, group = 1), color = "red", linetype = "dashed") +
geom_point(aes(y = mPrice), color = "red") +
theme(axis.text = element_text(color = "slateblue",
size = 7, angle = 90))
grafPpC
#mprice_m2
grafMpC <- ggplot(grpdfDpto, aes(x = comuna, y = mprice_m2, fill = comuna)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mprice_m2,1) ), vjust = -0.5) +
labs(title = "1.3. Media de costo $ por metro cuadro por Comunas",
x = "Comuna", y = "Media de Área de Dpto") +
theme_minimal() +
geom_line(aes(y = mprice_m2, group = 1), color = "red", linetype = "dashed") +
geom_point(aes(y = mprice_m2), color = "red") +
theme(axis.text = element_text(color = "slateblue",
size = 6, angle = 0))
grafMpC
grafApC <- ggplot(grpdfDpto, aes(x = comuna, y = mArea_m2, fill = comuna)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mArea_m2,1) ), vjust = -0.5) +
labs(title = "1.2. Media de Área de Dpto por Comunas",
x = "Comuna", y = "Media de Área de Dpto") +
theme_minimal() +
geom_line(aes(y = mArea_m2, group = 1), color = "red", linetype = "dashed") +
geom_point(aes(y = mArea_m2), color = "red") +
theme(axis.text = element_text(color = "slateblue",
size = 6, angle = 0))
grafApC
ggplot(data = dfDptoN, aes(x = factor(comuna), y = price_aprox_usd)) +
stat_boxplot(geom = "errorbar", # Bigotes
width = 0.2) +
geom_boxplot(fill = "#4271AE", colour = "#1F3552", # Colores
alpha = 0.9, outlier.colour = "red") +
scale_y_continuous(name = "price_aprox_usd") +  # Etiqueta de la variable continua
scale_x_discrete(name = "comuna") +        # Etiqueta de los grupos
theme(axis.line = element_line(colour = "black", size = 0.25))
ggplot(data = dfDptoN, aes(x = factor(comuna), y = price_usd_per_m2)) +
stat_boxplot(geom = "errorbar", # Bigotes
width = 0.2) +
geom_boxplot(fill = "#4271AE", colour = "#1F3552", # Colores
alpha = 0.9, outlier.colour = "red") +
scale_y_continuous(name = "price_usd_per_m2") +  # Etiqueta de la variable continua
scale_x_discrete(name = "comuna") +        # Etiqueta de los grupos
theme(axis.line = element_line(colour = "black", size = 0.25))
ggplot(data = dfDptoN, aes(x = factor(comuna), y = surface_total_in_m2)) +
stat_boxplot(geom = "errorbar", # Bigotes
width = 0.2) +
geom_boxplot(fill = "#4271AE", colour = "#1F3552", # Colores
alpha = 0.9, outlier.colour = "red") +
scale_y_continuous(name = "surface_total_in_m2") +  # Etiqueta de la variable continua
scale_x_discrete(name = "comuna") +        # Etiqueta de los grupos
theme(axis.line = element_line(colour = "black", size = 0.25))
# Replicamos la data
dfDptoNN <- dfDptoN
# Trataremos los valores atípicos
quantiles <- quantile(dfDptoNN$price_aprox_usd, c(0.05, 0.95), na.rm = TRUE)
dfDptoNN[dfDptoNN$price_aprox_usd>quantiles[2], "price_aprox_usd"]<-NA
summary(dfDptoNN$price_aprox_usd)
quantiles <- quantile(dfDptoNN$surface_total_in_m2, c(0.05, 0.95), na.rm = TRUE)
dfDptoNN[dfDptoNN$surface_total_in_m2>quantiles[2], "surface_total_in_m2"]<-NA
summary(dfDptoNN$surface_total_in_m2)
quantiles <- quantile(dfDptoNN$price_usd_per_m2, c(0.05, 0.95), na.rm = TRUE)
dfDptoNN[dfDptoNN$price_usd_per_m2>quantiles[2], "price_usd_per_m2"]<-NA
summary(dfDptoNN$price_usd_per_m2)
normalize1 <-function(x) { (x -min(na.omit(x)))/(max(na.omit(x))-min(na.omit(x)) ) }
##Corremos la normalización para los valores númericos para poder predecir
dfDptoNN_sna <- na.omit(dfDptoNN)
dfDptoNN_norm <- as.data.frame(lapply(dfDptoNN_sna[,c(5:8)], normalize1))
head(dfDptoNN_norm, 3)
# data de entranamiento y testeo
##Generate a random number that is 80% of the total number of rows in dataset.
data_split <- sample(1:nrow(dfDptoNN_norm), 0.8 * nrow(dfDptoNN_norm))
##extract training set
train <- dfDptoNN_norm[data_split,]
dim(train)
##extract testing set
test <- dfDptoNN_norm[-data_split,]
dim(test)
#price_aprox_usd 8 surface_total_in_m2 9 price_usd_per_m2 11
##extract 8vo columna del train dataset porque es usado 'price_aprox_usd' argumento de la función knn.
target_category <- dfDptoNN_sna[data_split,5]
##extract 8vo columna  para test_category
test_category <- dfDptoNN_sna[-data_split,5]
# Haciendo las predicciones
##run knn function
test_pred <- knn(train,test,cl=target_category,k=10)
df_pred=data.frame(test_category,test_pred)
table <- table(test_category,test_pred)
# Tomaremos la función KNN de VMI
missing_plot <- aggr( dfDptoNN[,c(5:8)], col = c('navyblue','yellow'),
number=TRUE, sortVars = TRUE,
labels=names(dfDptoNN[,c(5:8)]), cex.axis=0.7,
gap=4, ylab=c("Nulos en la Data", "Data Total"))
# price_aprox_usd 8 surface_total_in_m2 9 price_usd_per_m2 11  expenses
input_data<-kNN(dfDptoNN, variable = c("price_aprox_usd", "surface_total_in_m2", "price_usd_per_m2"), k=11)
# price_aprox_usd
grafico_mix(datos = input_data$price_aprox_usd, variable = "price_aprox_usd", titulo = "",
col_his = adjustcolor(col = "#F5762E", alpha.f = 0.5),
breaks = 15, col_line_density = "#F57F51",
col_caja = adjustcolor(col = "#B1F0E5", alpha.f = 0.5),
col_bigote = "#46A897", col_border = "#46A897")
# surface_total_in_m2
grafico_mix(datos = input_data$surface_total_in_m2, variable = "surface_total_in_m2", titulo = "",
col_his = adjustcolor(col = "#F5762E", alpha.f = 0.5),
breaks = 15, col_line_density = "#F57F51",
col_caja = adjustcolor(col = "#B1F0E5", alpha.f = 0.5),
col_bigote = "#46A897", col_border = "#46A897")
# Selección de variables para el modelamiento predictivo.
input_data_mapa <- input_data %>% drop_na()
# Graficamos indicando
input_data_mapa$long <- input_data_mapa$lon
input_data_mapa$rooms <- as.integer(input_data_mapa$rooms)
df_model <- dplyr::select(input_data_mapa, -created_on, -lat.lon, -lat, -lon,
-properati_url, -price_aprox_usd_imp, -surface_total_in_m2_imp,
-price_usd_per_m2_imp, -long)
head(df_model, 3)
# Analizaremos la coorelación de variables
correlacion <- round(cor(df_model[,c('price_aprox_usd', 'surface_total_in_m2', 'surface_covered_in_m2', 'price_usd_per_m2', 'rooms')]),3)
corrplot::corrplot(correlacion, method="number", type="upper")
# Eliminación de variables correlacionadas
df_modelc <- dplyr::select(df_model, -rooms, -surface_covered_in_m2)
head(df_modelc)
# Analizamos la frecuencia de las categorias de la variable barrio
g_barrio <- data.frame(df_modelc %>% group_by(barrio) %>% summarise(n = n()) %>% arrange(desc(n)))
# graficamos
ggplot(g_barrio, aes(x=reorder(barrio, n), y=n)) +
geom_bar(stat = "identity") +
labs(x = "Barrio", y = "freq") +
coord_flip()
# Sacamos las categorías que son inferiores a los 300
name_b_otro = c()
for (i in g_barrio[g_barrio$n <= 300,1]) {
name_b_otro <- append(name_b_otro, i)
}
name_b_otro
# Reemplazamo la categoría
df_modelc$n_barrio <- df_modelc$barrio
df_modelc$n_barrio <- as.character(df_modelc$n_barrio)
df_modelc['n_barrio'] <- lapply(df_modelc['n_barrio'], function(x) replace(x,x %in% name_b_otro, 'OTRO'))
# Analizamos la frecuencia de las nuevas categorias de la variable n_barrio
g_barrion <- data.frame(df_modelc %>% group_by(n_barrio) %>% summarise(n = n()) %>% arrange(desc(n)))
# graficamos
ggplot(g_barrion, aes(x=reorder(n_barrio, n), y=n)) +
geom_bar(stat = "identity") +
labs(x = "Barrio", y = "freq") +
coord_flip()
g_comuna <- df_modelc %>% group_by(comuna) %>% summarise(n = n())
ggplot(g_comuna, aes(x=reorder(comuna, n), y=n)) +
geom_bar(stat = "identity") +
labs(x = "Barrio", y = "freq") +
coord_flip()
# Sacamos las categorías que son inferiores a los 550
name_c_otro = c()
for (i in g_comuna[g_comuna$n <= 550,1]) {
name_c_otro <- append(name_c_otro, i)
}
name_c_otro
# Reemplazamo la categoría
df_modelc$n_comuna <- df_modelc$comuna
df_modelc$n_comuna <- as.character(df_modelc$n_comuna)
df_modelc['n_comuna'] <- lapply(df_modelc['n_comuna'], function(x) replace(x,x %in% name_c_otro, 'OTRO'))
# Analizamos la frecuencia de las nuevas categorias de la variable n_barrio
g_comunan <- data.frame(df_modelc %>% group_by(n_comuna) %>% summarise(n = n()) %>% arrange(desc(n)))
# graficamos
ggplot(g_comunan, aes(x=reorder(n_comuna, n), y=n)) +
geom_bar(stat = "identity") +
labs(x = "Barrio", y = "freq") +
coord_flip()
# Eliminación de variables
df_model_pre <- dplyr::select(df_modelc, -barrio, -comuna)
head(df_model_pre, 3)
# Test de independencia
tabla <- table(df_model_pre$n_barrio, df_model_pre$n_comuna)
chisq.test(tabla)
ggplot(data = df_model_pre, aes(x = factor(n_comuna), y = price_aprox_usd)) +
stat_boxplot(geom = "errorbar", # Bigotes
width = 0.2) +
geom_boxplot(fill = "#4271AE", colour = "#1F3552", # Colores
alpha = 0.9, outlier.colour = "red") +
scale_y_continuous(name = "price_aprox_usd") +  # Etiqueta de la variable continua
scale_x_discrete(name = "Comuna") +        # Etiqueta de los grupos
theme(axis.line = element_line(colour = "black", size = 0.25)) +
coord_flip()
ggplot(data = df_model_pre, aes(x = factor(n_barrio), y = price_aprox_usd)) +
stat_boxplot(geom = "errorbar", # Bigotes
width = 0.2) +
geom_boxplot(fill = "#4271AE", colour = "#1F3552", # Colores
alpha = 0.9, outlier.colour = "red") +
scale_y_continuous(name = "price_aprox_usd") +  # Etiqueta de la variable continua
scale_x_discrete(name = "Barrio") +        # Etiqueta de los grupos
theme(axis.line = element_line(colour = "black", size = 0.25)) +
coord_flip()
dfmodelamiento <- dplyr::select(df_model_pre, -n_comuna)
head(dfmodelamiento)
set.seed(1998)
indice <- caret::createDataPartition(dfmodelamiento$price_aprox_usd,times = 1, p = 0.85, list = F)
# Dimensión de la data de entrenamiento
dftrain <- dfmodelamiento[indice,]
dim(dftrain)
# Dimensión de la data de testeo
dftest <- dfmodelamiento[-indice,]
dim(dftest)
ModelF <- lm(price_aprox_usd ~ surface_total_in_m2 + price_usd_per_m2 + n_barrio , data = dftrain)
summary(ModelF)
car::vif(ModelF)
# Obtención de los residuos y los valores ajustados
residuo <- residuals(ModelF)
v_ajustado <- fitted(ModelF)
# creamos la base para evaluar los errores
reg_mult = data.frame(v_ajustado, residuo)
# Graficamos
ggplot(data = reg_mult, aes(x = v_ajustado, y = residuo)) +
geom_point(aes(color = residuo)) +
scale_color_gradient2(low = "blue3", mid = "grey", high = "red") +
geom_segment(aes(xend = v_ajustado, yend = 0), alpha = 0.2) +
geom_smooth(se = FALSE, color = "gold4") +
labs(title = "Distribución de los residuos", x = "Valores ajustados",
y = "Residuo") +
geom_hline(yintercept = 0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
bptest(ModelF)
qqnorm(residuo, main = "Gráfico QQ de los Residuos", col = 'steelblue')
qqline(residuo, col = 'red', lwd = 1.5)
ad.test(residuo)
ggplot(data = reg_mult, aes(x = seq_along(residuo), y = residuo)) +
geom_point(aes(color = residuo)) +
scale_color_gradient2(low = "blue3", mid = "grey", high = "red") +
geom_line(size = 0.3) +
labs(title = "Distribución de los residuos", x = "index", y = "residuo") +
geom_hline(yintercept = 0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
dwtest(ModelF)
# options(scipen = 999) # para evitar la anotación científica
#Cargando los datos de las comunas
comunas <- st_read("../data/comunas.json")
ggplot(data = comunas) +
geom_sf() +
geom_point(data= input_data_mapa,
aes(x=long, y = lat,  color = rooms),
stroke = F) +
scale_size_continuous(name = "Miles de Dólares") +
ggtitle( "Ubicación de  Dptos en las Comunas de Buenos Aires")
# Para una mejor visualización de la ubicación sólo grafiacremos las tres primeras comunidades.
comuna02 <- st_read("../data/comuna02.json")
data_mapa_comuna02 <- filter(input_data_mapa, comuna == 2)
table(data_mapa_comuna02$rooms)
data_mapa_comuna02<-head(data_mapa_comuna02, 50)
ggplot(data = comuna02) +
geom_sf() +
geom_point(data= data_mapa_comuna02,
aes(x=long, y = lat, size = price_aprox_usd/1000, color = rooms),
stroke = F ) +
scale_size_continuous(name = "Miles de Dólares") +
ggtitle( "Ubicación de Dptos en la Comuna 2")
write.csv(input_data_mapa, file = "../data/datos_properati_out.csv")
#Cargando los datos de las comunas
comunas <- st_read("../data/comunas.json")
ggplot(data = comunas) +
geom_sf() +
geom_point(data= input_data_mapa,
aes(x=long, y = lat,  color = rooms),
stroke = F) +
scale_size_continuous(name = "Miles de Dólares") +
ggtitle( "Ubicación de  Dptos en las Comunas de Buenos Aires")
# Para una mejor visualización de la ubicación sólo grafiacremos las tres primeras comunidades.
comuna02 <- st_read("../data/comuna02.json")
data_mapa_comuna02 <- filter(input_data_mapa, comuna == 2)
ggplot(data = comuna02) +
geom_sf() +
geom_point(data= data_mapa_comuna02,
aes(x=long, y = lat, size = price_aprox_usd/1000, color = rooms),
stroke = F ) +
scale_size_continuous(name = "Miles de Dólares") +
ggtitle( "Ubicación de Dptos en la Comuna 2")
par(mfrow=c(1,4))
# price_usd_per_m2
qqnorm(dfDptoN[,8],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[8]), col = 'steelblue')
qqline(dfDptoN[,8],col="red")
text(-2, 5000, paste("AD: p-value = ", format(ad.test(dfDptoN$price_usd_per_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# price_aprox_usd
qqnorm(dfDptoN[,5],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[5]), col = 'steelblue')
qqline(dfDptoN[,5],col="red")
text(-2, 1000000, paste("AD: p-value = ", format(ad.test(dfDptoN$price_aprox_usd)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# surface_covered_in_m2
qqnorm(dfDptoN[,7],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[7]), col = 'steelblue')
qqline(dfDptoN[,7],col="red")
text(-2, 175, paste("AD: p-value = ", format(ad.test(dfDptoN$surface_covered_in_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# surface_total_in_m2
qqnorm(dfDptoN[,6],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[6]), col = 'steelblue')
qqline(dfDptoN[,6],col="red")
text(-2, 170, paste("AD: p-value = ", format(ad.test(dfDptoN$surface_total_in_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
par(mfrow=c(1,4))
# price_usd_per_m2
qqnorm(dfDptoN[,8],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[8]), col = 'steelblue')
qqline(dfDptoN[,8],col="red")
text(-2, 5000, paste("AD: p-value = ", format(ad.test(dfDptoN$price_usd_per_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# price_aprox_usd
qqnorm(dfDptoN[,5],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[5]), col = 'steelblue')
qqline(dfDptoN[,5],col="red")
text(-2, 1000000, paste("AD: p-value = ", format(ad.test(dfDptoN$price_aprox_usd)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# surface_covered_in_m2
qqnorm(dfDptoN[,7],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[7]), col = 'steelblue')
qqline(dfDptoN[,7],col="red")
text(-2, 175, paste("AD: p-value = ", format(ad.test(dfDptoN$surface_covered_in_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# surface_total_in_m2
qqnorm(dfDptoN[,6],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[6]), col = 'steelblue')
qqline(dfDptoN[,6],col="red")
text(-2, 170, paste("AD: p-value = ", format(ad.test(dfDptoN$surface_total_in_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
par(mfrow=c(1,4))
# price_usd_per_m2
qqnorm(dfDptoN[,8],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[8]), col = 'steelblue')
qqline(dfDptoN[,8],col="red")
text(-2, 5000, paste("AD: p-value = ", format(ad.test(dfDptoN$price_usd_per_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# price_aprox_usd
qqnorm(dfDptoN[,5],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[5]), col = 'steelblue')
qqline(dfDptoN[,5],col="red")
text(-2, 1000000, paste("AD: p-value = ", format(ad.test(dfDptoN$price_aprox_usd)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# surface_covered_in_m2
qqnorm(dfDptoN[,7],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[7]), col = 'steelblue')
qqline(dfDptoN[,7],col="red")
text(-2, 175, paste("AD: p-value = ", format(ad.test(dfDptoN$surface_covered_in_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# surface_total_in_m2
qqnorm(dfDptoN[,6],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[6]), col = 'steelblue')
qqline(dfDptoN[,6],col="red")
text(-2, 170, paste("AD: p-value = ", format(ad.test(dfDptoN$surface_total_in_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
par(mfrow=c(1,4))
# price_usd_per_m2
qqnorm(dfDptoN[,8],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[8]), col = 'steelblue')
qqline(dfDptoN[,8],col="red")
text(-2, 5000, paste("AD: p-value = ", format(ad.test(dfDptoN$price_usd_per_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# price_aprox_usd
qqnorm(dfDptoN[,5],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[5]), col = 'steelblue')
qqline(dfDptoN[,5],col="red")
text(-2, 1000000, paste("AD: p-value = ", format(ad.test(dfDptoN$price_aprox_usd)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# surface_covered_in_m2
qqnorm(dfDptoN[,7],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[7]), col = 'steelblue')
qqline(dfDptoN[,7],col="red")
text(-2, 175, paste("AD: p-value = ", format(ad.test(dfDptoN$surface_covered_in_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
# surface_total_in_m2
qqnorm(dfDptoN[,6],main = paste("Normal Q-Q Plot for\n",colnames(dfDptoN)[6]), col = 'steelblue')
qqline(dfDptoN[,6],col="red")
text(-2, 170, paste("AD: p-value = ", format(ad.test(dfDptoN$surface_total_in_m2)$p.value, scientific = T)), col = "#000000", cex = 0.7)
corrplot::corrplot.mixed(correlacion, order = 'AOE')
corrplot::corrplot(correlacion, type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10))
corrplot::corrplot(correlacion, type = 'lower', order = 'hclust', tl.col = 'black', cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10))
corrplot::corrplot(correlacion, type = 'lower', order = 'hclust', tl.col = 'black', cl.ratio = 0.2, tl.srt = 45)
corrplot::corrplot(correlacion, p.mat = testRes$p, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8, order = 'AOE', diag=FALSE)
corrplot::corrplot(correlacion, p.mat = testRes$p, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8,diag=FALSE)
corrplot::corrplot(correlacion, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8,diag=FALSE)
corrplot::corrplot(correlacion, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8,diag=T)
corrplot::corrplot(correlacion, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8,diag=T, tl.srt = 45,)
corrplot::corrplot(correlacion, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8,diag=T, tl.srt = 90,)
corrplot::corrplot(correlacion, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8,diag=T, tl.srt = 0,)
corrplot::corrplot(correlacion, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8,diag=T, tl.srt = 15,)
```{r echo=FALSE, fig.width=8, fig.height=3}
corrplot::corrplot(correlacion, method = 'circle', type = 'lower', insig='blank',
addCoef.col ='black', number.cex = 0.8,diag=T, tl.srt = 15,)
